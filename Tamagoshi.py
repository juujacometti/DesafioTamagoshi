import json # Para salvar o hist√≥rico do bichinho no JSON


# ====== Listas para o funcionamento do jogo ======
                    # √Ågua            Terra               Ar                Fogo               
listaBrincadeiras = ["Ir na piscina", "Castelo de areia", "Soltar pipa", "Jogar queimada", "Video game", "Cancelar escolha"]
listaComidas = ["Gelatina", "Batata", "Pipoca", "Pimenta", "Sorvete", "Cancelar alimenta√ß√£o"]
listaAcao = [f"Alimentar", "Brincar", "Passar o tempo", "Necessidade da ra√ßa", "Status do pet", "Sair (o pet ir√° dormir)", "Apagar pet"]


# ====== Classe m√£e ======
class Tamagoshi:
    def __init__(self, nome):
        self.nome = nome
        self.fome = 50 
        self.saude = 100
        self.idade = 0
        self.tedio = 50
        self.dormindo = False
        
    def statusPet(self):
        print(f"\n{25 * '='}\nSTATUS DE: {self.nome}")
        print(f"üòã Fome: {self.fome:.2f}")
        print(f"üò∑ Sa√∫de: {self.saude}")
        print(f"üôÑ T√©dio: {self.tedio:.2f}")
        self.humor()
        print(f"üìè Idade: {self.idade}")
        if isinstance(self, Aquati):
            print(f"üíß Hidrata√ß√£o: {self.hidratacao}")
        elif isinstance(self, Fuegui):
            print(f"Calor: {self.calor}")
            
            
    def acoes(self):
        if isinstance(self, Aquati):
            listaAcao[3] = "4 - üíß Hidratar"
        elif isinstance(self, Fuegui):
            listaAcao[3] = "4 - üî• Esquentar"
        elif isinstance(self, Ari):
            listaAcao[3] = "4 - üí® Refrescar"
        elif isinstance(self, Terru):
            listaAcao[3] = "4 - üå± Conectar √† Natureza"
        
        
        


    # Verifica as condi√ß√µes da brincadeira
    def brincar(self, escolhaBrincadeira):
        if (self.tedio >= 0) and (self.tedio <= 100):    # Verifica o n√≠vel de t√©dio           
            if escolhaBrincadeira in [1, 2, 3, 4]:
                self.tedio = max(0, self.tedio - 15)
            elif escolhaBrincadeira == 5:
                self.tedio = max(0, self.tedio - 10)
            elif escolhaBrincadeira == 6:
                print("Brincadeira cancelada")
        else:
            print(f"{self.nome} n√£o est√° com t√©dio.") 
        print(f"N√≠vel de t√©dio: {self.tedio}")    # Informa√ß√£o para o usu√°rio

    
    # Verifica as condi√ß√µes de alimenta√ß√£o
    def alimentar(self, escolhaComida):
        if (self.fome >= 0) and (self.fome <= 100):    # Verifica o n√≠vel de fome
            if escolhaComida in [1, 2, 3, 4]:
                self.fome = max(0, self.fome - 15)
            elif escolhaComida == 5:
                self.fome = max(0, self.fome - 10)
            elif escolhaComida == 6:
                print("Alimenta√ß√£o cancelada")
        else:
            print(f"{self.nome} n√£o est√° com fome!")
        print(f"N√≠vel de fome: {self.fome}")    # Informa√ß√£o para o usu√°rio
    
    
    # Verifica o humor
    def humor(self):
        humor = 100 - ((self.fome + self.tedio) / 2)
        # Condi√ß√£o que define o humor 
        if humor <= 25:
            print("üôÑ Humor: Triste üò≠")
        elif humor <= 50:
            print("üôÑ Humor: Est√°vel üòê")
        elif humor <= 75:
            print("üôÑ Humor: Bem ‚ò∫Ô∏è")
        else:
            print("üôÑ Humor: Muito feliz! üòÅ")
            
            
    # Verifica se est√° dormindo         
    def dormir(self):
        self.dormindo = True
        print(f"{self.nome} est√° dormindo agora... üò¥")
        
    def acordar(self):
        self.dormindo = False
        print(f"{self.nome} est√° acordado! üåû")
        
    
    # Verifica a vida (EST√Å IGUAL AO DA MARI, N√ÉO MEXI)
    # Diminui a sa√∫de do bichinho conforme as condi√ß√µes de fome (quanto mais alta, pior)
    def vida(self):
    # Reduz a sa√∫de dependendo da fome e t√©dio
        if self.fome > 90 or self.tedio > 90:
            self.saude = 0
        elif self.fome > 80 or self.tedio > 80:
            self.saude -= 50
        elif self.fome > 60 or self.tedio > 60:
            self.saude -= 30
        elif self.fome > 50 or self.tedio > 50:
            self.saude -= 10
        
        # Garante que a sa√∫de nunca fique negativa
        self.saude = max(0, self.saude)
        
        if self.saude == 0 or self.fome >= 100:
            print("üíÄ Seu bichinho morreu ‚ö∞Ô∏è")
            return True  # podemos retornar True pra indicar que morreu
        return False


            
    
    # Verifica o passar do tempo (EST√Å IGUAL AO DA MARI, N√ÉO MEXI)
    def tempoPassando(self):
        morreu = self.vida()
        if morreu:
            return # Sai da fun√ß√£o se morreu
        self.idade += 1 # O tempo passa e o pet envelhece
        self.tedio += 2.5 # Aumenta o t√©dio com o passar do tempo
        self.fome += 2.5


# ====== Cria√ß√£o de ra√ßas ======
#Ra√ßa de √°gua
class Aquati(Tamagoshi):
    def __init__(self, nome):
        super().__init__(nome)
        self.hidratacao = 50  # Necessidade especial: hidrata√ß√£o

    # Fun√ß√£o especial do Aquati
    def hidratar(self):
        print(f"{self.nome} est√° se hidratando üíß...")
        # Aumenta hidrata√ß√£o (n√£o passa de 100)
        self.hidratacao = min(100, self.hidratacao + 10)
        # Reduz o t√©dio (n√£o fica menor que 0)
        self.tedio = max(0, self.tedio - 15)
        print(f"Hidrata√ß√£o: {self.hidratacao}, T√©dio: {self.tedio}")


class Fuegui(Tamagoshi):
    def __init__(self, nome):
        super().__init__(nome)
        self.calor = 50  # Necessidade especial: calor

    # Fun√ß√£o especial do Fuegui
    def esquentar(self):
        print(f"{self.nome} est√° absorvendo calor üî•...")
        # Aumenta o calor (limite 100)
        self.calor = min(100, self.calor + 10)
        # Diminui a fome (m√≠nimo 0)
        self.fome = max(0, self.fome - 10)
        print(f"Calor: {self.calor}, Fome: {self.fome}")


class Ari(Tamagoshi):
    def __init__(self, nome):
        super().__init__(nome)
        self.refrescancia = 50  # Necessidade especial: refresc√¢ncia

    # Fun√ß√£o especial do Ari
    def pipar(self):
        print(f"{self.nome} est√° sentindo a brisa do vento üí®...")
        # Aumenta a refresc√¢ncia (at√© 100)
        self.refrescancia = min(100, self.refrescancia + 10)
        # Recupera um pouco da sa√∫de (at√© 100)
        self.saude = min(100, self.saude + 5)
        print(f"Refresc√¢ncia: {self.refrescancia}, Sa√∫de: {self.saude}")


class Terru(Tamagoshi):
    def __init__(self, nome):
        super().__init__(nome)
        self.resistencia = 50  # Necessidade especial: resist√™ncia

    # Fun√ß√£o especial do Terru
    def conexaoNatureza(self):
        print(f"{self.nome} est√° se conectando com a natureza üå±...")
        # Aumenta a resist√™ncia (at√© 100)
        self.resistencia = min(100, self.resistencia + 10)
        # Reduz bastante o t√©dio (m√≠nimo 0)
        self.tedio = max(0, self.tedio - 20)
        print(f"Resist√™ncia: {self.resistencia}, T√©dio: {self.tedio}")


# Puxando para o JSON
def salvar_estado(pet, nome_arquivo="pet.json"):
    dados = {
        "nome": pet.nome,
        "fome": pet.fome,
        "saude": pet.saude,
        "idade": pet.idade,
        "tedio": pet.tedio,
        "dormindo": pet.dormindo,
        "raca": pet.__class__.__name__,
        "extra": {}
    }

    if isinstance(pet, Aquati):
        dados["extra"]["hidratacao"] = pet.hidratacao
    elif isinstance(pet, Fuegui):
        dados["extra"]["calor"] = pet.calor
    elif isinstance(pet, Ari):
        dados["extra"]["refrescancia"] = pet.refrescancia
    elif isinstance(pet, Terru):
        dados["extra"]["resistencia"] = pet.resistencia

    with open(nome_arquivo, "w") as arq:
        json.dump(dados, arq, indent=4)



def carregar_estado(nome_arquivo="pet.json"):
    try:
        with open(nome_arquivo, "r") as arq:
            dados = json.load(arq)

            nome = dados["nome"]
            raca = dados["raca"]

            if raca == "Aquati":
                pet = Aquati(nome)
                pet.hidratacao = dados["extra"]["hidratacao"]
            elif raca == "Fuegui":
                pet = Fuegui(nome)
                pet.calor = dados["extra"]["calor"]
            elif raca == "Ari":
                pet = Ari(nome)
                pet.refrescancia = dados["extra"]["refrescancia"]
            elif raca == "Terru":
                pet = Terru(nome)
                pet.resistencia = dados["extra"]["resistencia"]
            else:
                return None

            pet.fome = dados["fome"]
            pet.saude = dados["saude"]
            pet.idade = dados["idade"]
            pet.tedio = dados["tedio"]
            pet.dormindo = dados["dormindo"]

            return pet

    except FileNotFoundError:
        return None
 